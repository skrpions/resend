"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[72784],{72784:function(e,n,t){t.r(n),t.d(n,{LandingPageIntegrate:function(){return N}});var s=t(85893),r=t(62469),a=t(95059),o=t(60434),i=t(93967),c=t.n(i),l=t(16893),d=t(9008),u=t.n(d),p=t(67294),m=t(33554),h=t(70389),f=t(27303),x=t(51914),g=t(15394),b=t(65143),j=t(77472),y=t(62198),v=t(43725),R=t(3574),w=t(59145);let N=()=>(0,s.jsxs)(w.T3.Section,{className:"max-w-5xl md:max-w-7xl",children:[(0,s.jsx)(E,{}),(0,s.jsx)(w.T3.Description,{className:"mx-auto mb-12 max-w-5xl text-center",children:"A simple, elegant interface so you can start sending emails in minutes. It fits right into your code with SDKs for your favorite programming languages."}),(0,s.jsx)(_,{})]}),_=()=>{var e;let{localDatetime:n}=(0,v.x)(),t=(0,f.c)(n),[i,l]=p.useState("Node.js"),[d,u]=p.useState("Node.js"),[N,_]=(0,R._)("current-sdk","Node.js"),[E,P]=p.useState("nextjs-app-router"),[A,T]=(0,R._)("current-framework","Node.js");return p.useEffect(()=>{var e,n;let t=N,s=A;Object.values(S).find(e=>e.name===N)||_(t=Object.values(S)[0].name),Object.values(null===(e=S[t])||void 0===e?void 0:e.snippets).find(e=>e.title===A)||T(s=Object.values(null===(n=S[t])||void 0===n?void 0:n.snippets)[0].title),l(t||"Node.js"),u(s||"Node.js")},[N,A,T,_]),(0,s.jsxs)(o.fC,{className:"mx-auto flex max-w-5xl flex-col gap-12",onValueChange:e=>{l(e),_(e);let n=Object.values(S[e].snippets)[0].title;u(n),T(n)},value:i,children:[(0,s.jsxs)("div",{className:"flex",children:[(0,s.jsx)(o.aV,{className:"d:px-16 -ml-6 -mr-6 flex items-center justify-between gap-8 overflow-x-auto px-6 pb-4 md:mx-auto md:px-0 md:pb-0",children:Object.values(S).map(e=>(0,s.jsxs)(o.xz,{className:"group flex flex-col items-center justify-center gap-4 text-slate-11 outline-none hover:text-slate-12 ",value:e.name,children:[(0,s.jsx)("div",{className:"flex h-14 w-[4.25rem] items-center justify-center rounded-2xl border border-slate-6 transition duration-200 ease-in-out group-data-[state='active']:bg-gradient-to-b group-data-[state='active']:from-white/[3%]",children:(0,s.jsx)(x.$,{as:"icon",isActive:e.name===i,children:e.icon})}),(0,s.jsx)(w.jP,{className:"transition duration-200 ease-in-out group-hover:text-slate-12 group-data-[state='active']:text-slate-12",size:"2",children:e.name})]},e.name))}),(0,s.jsx)("div",{"aria-hidden":"true",className:"pointer-events-none relative h-14 w-px before:absolute before:-right-6 before:top-0 before:z-10 before:h-full before:w-20 before:bg-gradient-to-l before:from-black before:content-['']"})]}),(0,s.jsx)(o.VY,{className:"rounded-3xl outline-none focus-visible:ring-2 focus-visible:ring-slate-7",value:i,children:(0,s.jsxs)(m.d.Root,{onValueChange:e=>{u(e),T(e)},value:d,children:[(0,s.jsxs)(m.d.Header,{className:"px-0 md:px-4",children:[(0,s.jsxs)("div",{className:"flex w-full items-center justify-between gap-2",children:[(0,s.jsx)(m.d.Tabs,{className:"h-16 w-full px-4 md:px-0",children:Object.values(null===(e=S[i])||void 0===e?void 0:e.snippets).map(e=>(0,s.jsx)(h.a,{id:i,isActive:d===e.title,title:e.title,value:e.title,children:e.title},e.title))}),(0,s.jsx)("div",{"aria-hidden":"true",className:"relative h-10 w-px before:absolute before:right-0 before:top-0 before:z-10 before:h-full before:w-14 before:bg-gradient-to-l before:from-black before:content-['']"})]}),(0,s.jsxs)("div",{className:"hidden items-center gap-3 md:flex",children:["Next.js"===d&&(0,s.jsxs)(a.fC,{onValueChange:e=>P(e),value:E,children:[(0,s.jsxs)(a.xz,{"aria-label":"Next.js",className:"flex h-8 w-full items-center gap-1 whitespace-nowrap rounded-md pl-2 pr-1 text-sm text-slate-11 hover:bg-slate-4",children:[(0,s.jsx)(a.B4,{placeholder:"Select Next.js Router"}),(0,s.jsx)(a.JO,{children:(0,s.jsx)(r.v4q,{})})]}),(0,s.jsx)(a.h_,{children:(0,s.jsx)(a.VY,{className:c()("bg-root z-20 overflow-hidden rounded-md border border-slate-6 p-1","".concat(b.inter.variable," font-sans")),children:(0,s.jsxs)(a.l_,{children:[(0,s.jsxs)(a.ck,{className:"flex h-6 select-none items-center rounded pl-6 pr-2 text-sm text-slate-11 hover:bg-slate-4",value:"nextjs-app-router",children:[(0,s.jsx)(a.wU,{className:"absolute left-0",children:(0,s.jsx)(j.NO,{})}),(0,s.jsx)(a.eT,{className:"relative flex select-none items-center leading-none",children:"App Router"})]}),(0,s.jsxs)(a.ck,{className:"flex h-6 select-none items-center rounded pl-6 pr-2 text-sm text-slate-11 hover:bg-slate-4",value:"nextjs-pages-router",children:[(0,s.jsx)(a.wU,{className:"absolute left-0",children:(0,s.jsx)(j.NO,{})}),(0,s.jsx)(a.eT,{className:"relative flex select-none items-center leading-none",children:"Pages Router"})]})]})})})]}),(0,s.jsx)("div",{children:(0,s.jsx)(m.d.Copy,{value:S[i].snippets[d].code})})]})]}),Object.values(S[i].snippets).map(e=>(0,s.jsxs)(o.VY,{className:"outline-none focus-visible:ring-2 focus-visible:ring-slate-7",value:e.title,children:[(0,s.jsx)(m.d.Snippet,{className:"h-[500px]",syntax:e.syntax,theme:t,title:e.title,value:"Next.js"===d?"nextjs-app-router"===E?y.w0:y.qQ:e.code}),(0,s.jsxs)(m.d.Footer,{children:[(0,s.jsx)(g.r,{className:"p-0.5 text-xs text-slate-11 hover:text-slate-12 focus-visible:text-slate-12",href:e.github,target:"_blank",children:(0,s.jsxs)("span",{className:"flex items-center gap-1",children:[(0,s.jsx)(j.Uv,{height:20,width:20}),"View on GitHub"]})}),(0,s.jsx)(g.r,{className:"hidden p-0.5 text-xs text-slate-11 hover:text-slate-12 focus-visible:text-slate-12 md:inline-block",href:"".concat(e.github,"/archive/refs/heads/main.zip"),target:"_blank",children:(0,s.jsxs)("span",{className:"flex items-center gap-1",children:[(0,s.jsx)(j.GV,{height:20,width:20}),"Download ZIP"]})})]})]},e.title))]})})]})},E=p.memo(()=>{let{localDatetime:e}=(0,v.x)(),n=e=>{let{src:n,fallback:t}=e,r=p.useRef(null),a=(0,l.Y)(r);return p.useEffect(()=>{if(a){var e;null===(e=r.current)||void 0===e||e.play()}},[a]),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(u(),{children:(0,s.jsx)("link",{as:"fetch",crossOrigin:"anonymous",href:n,rel:"preload"})}),(0,s.jsx)("video",{ref:r,muted:!0,playsInline:!0,className:"mx-auto mb-4",controls:!1,height:170,poster:t,src:n,width:170})]})},t=e=>{let{text:n}=e;return(0,s.jsxs)(w.T3.Title,{className:"text-center",children:["Integrate ",(0,s.jsx)(x.$,{children:n})]})};switch(e){case"morning":return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n,{fallback:"/static/landing-page/3d-integrate-morning-fallback.jpg",src:"/static/landing-page/3d-integrate-morning.mp4"}),(0,s.jsx)(t,{text:"this morning"})]});case"afternoon":return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n,{fallback:"/static/landing-page/3d-integrate-afternoon-fallback.jpg",src:"/static/landing-page/3d-integrate-afternoon.mp4"}),(0,s.jsx)(t,{text:"this afternoon"})]});case"night":return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n,{fallback:"/static/landing-page/3d-integrate-night-fallback.jpg",src:"/static/landing-page/3d-integrate-night.mp4"}),(0,s.jsx)(t,{text:"tonight"})]});case"weekend":return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n,{fallback:"/static/landing-page/3d-integrate-weekend-fallback.jpg",src:"/static/landing-page/3d-integrate-weekend.mp4"}),(0,s.jsx)(t,{text:"this weekend"})]});default:return(0,s.jsx)(s.Fragment,{children:"Today"})}}),S={"Node.js":{name:"Node.js",icon:(0,s.jsx)(j.eN,{height:32,width:32}),snippets:{"Node.js":{title:"Node.js",syntax:"typescript",code:y.u_,github:y.eW},"Next.js":{title:"Next.js",syntax:"typescript",code:y.w0,github:y._G},Remix:{title:"Remix",syntax:"typescript",code:y.V6,github:y.Cd},Nuxt:{title:"Nuxt",syntax:"typescript",code:y.$G,github:y.MA},Express:{title:"Express",syntax:"typescript",code:y.ij,github:y.O8},Redwood:{title:"Redwood",syntax:"typescript",code:y.U7,github:y.tW},Bun:{title:"Bun",syntax:"typescript",code:y.rW,github:y.KR}}},Serverless:{name:"Serverless",icon:(0,s.jsx)(j.s2,{height:32,width:32}),snippets:{"Vercel Edge Functions":{title:"Vercel Edge Functions",syntax:"typescript",code:y.Q_,github:y.HV},"Supabase Edge Functions":{title:"Supabase Edge Functions",syntax:"typescript",code:y.U_,github:y.Op},"Cloudflare Workers":{title:"Cloudflare Workers",syntax:"typescript",code:y.Il,github:y.wv},"AWS Lambda":{title:"AWS Lambda",syntax:"typescript",code:y.u7,github:y.v$}}},Ruby:{name:"Ruby",icon:(0,s.jsx)(j.gz,{height:32,width:32}),snippets:{Ruby:{title:"Ruby",syntax:"python",code:y.FJ,github:y.km},Rails:{title:"Rails",syntax:"python",code:y.$Z,github:y.aE},Sinatra:{title:"Sinatra",syntax:"python",code:y.Ep,github:y.i}}},Python:{name:"Python",icon:(0,s.jsx)(j.Bm,{height:32,width:32}),snippets:{Python:{title:"Python",syntax:"python",code:y.HY,github:y.xo},Flask:{title:"Flask",syntax:"python",code:y.wF,github:y.Iu}}},PHP:{name:"PHP",icon:(0,s.jsx)(j.ZO,{height:32,width:32}),snippets:{PHP:{title:"PHP",syntax:"php",code:y.IV,github:y.XB},Laravel:{title:"Laravel",syntax:"php",code:y.q2,github:y.Pi}}},Go:{name:"Go",icon:(0,s.jsx)(j.zq,{height:32,width:32}),snippets:{Go:{title:"Go",syntax:"go",code:y.Su,github:y.Q}}},Java:{name:"Java",icon:(0,s.jsx)(j.KU,{height:32,width:32}),snippets:{Java:{title:"Java",syntax:"java",code:y.Q4,github:y._i}}},Elixir:{name:"Elixir",icon:(0,s.jsx)(j.yL,{height:32,width:32}),snippets:{Elixir:{title:"Elixir",syntax:"elixir",code:y.Bu,github:y.RM},Phoenix:{title:"Phoenix",syntax:"elixir",code:y.pN,github:y.NY}}},REST:{name:"REST",icon:(0,s.jsx)(j.gP,{height:32,width:32}),snippets:{cURL:{title:"cURL",syntax:"bash",code:y.gd,github:y.bT},wget:{title:"wget",syntax:"bash",code:y.g6,github:y.Yv}}},SMTP:{name:"SMTP",icon:(0,s.jsx)(j.nt,{height:32,width:32}),snippets:{Django:{title:"Django",syntax:"python",code:y.Ke,github:y.Ms},Laravel:{title:"Laravel",syntax:"php",code:y.L5,github:y.Pi},Nodemailer:{title:"Nodemailer",syntax:"typescript",code:y.IM,github:y.bJ},Rails:{title:"Rails",syntax:"ruby",code:y.xw,github:y.aE}}}}},62198:function(e,n,t){t.d(n,{$G:function(){return p},$Z:function(){return j},Bu:function(){return R},Cd:function(){return L},Ep:function(){return y},FJ:function(){return b},HV:function(){return B},HY:function(){return N},IM:function(){return I},IV:function(){return x},Il:function(){return A},Iu:function(){return Z},KR:function(){return K},Ke:function(){return O},L5:function(){return M},MA:function(){return J},Ms:function(){return ei},NY:function(){return er},O8:function(){return F},Op:function(){return U},Pi:function(){return ee},Q:function(){return en},Q4:function(){return D},Q_:function(){return k},RM:function(){return es},Su:function(){return v},U7:function(){return f},U_:function(){return T},V6:function(){return u},XB:function(){return X},Yv:function(){return eo},_G:function(){return q},_i:function(){return et},aE:function(){return W},bJ:function(){return ec},bT:function(){return ea},eW:function(){return Y},g6:function(){return S},gd:function(){return E},i:function(){return G},ij:function(){return m},km:function(){return z},pN:function(){return w},q2:function(){return g},qQ:function(){return d},rW:function(){return h},tW:function(){return H},u7:function(){return P},u_:function(){return c},v$:function(){return $},w0:function(){return l},wF:function(){return _},wv:function(){return V},xo:function(){return Q},xw:function(){return C}});let s="re_123456789",r="onboarding@resend.dev",a="delivered@resend.dev",o="Hello World",i="<strong>it works!</strong>",c="import { Resend } from 'resend';\n\nconst resend = new Resend('".concat(s,"');\n\n(async function() {\n  const { data, error } = await resend.emails.send({\n    from: '").concat(r,"',\n    to: '").concat(a,"',\n    subject: '").concat(o,"',\n    html: '").concat(i,"'\n  });\n\n  if (error) {\n    return console.log(error);\n  }\n\n  console.log(data);\n})();"),l="import { EmailTemplate } from '@/components/email-template';\nimport { Resend } from 'resend';\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nexport async function POST() {\n  const { data, error } = await resend.emails.send({\n    from: 'onboarding@resend.dev',\n    to: 'delivered@resend.dev',\n    subject: 'Hello world',\n    react: EmailTemplate({ firstName: 'John' }),\n  });\n\n  if (error) {\n    return Response.json({ error });\n  }\n\n  return Response.json(data);\n}",d="import type { NextApiRequest, NextApiResponse } from 'next';\nimport { EmailTemplate } from '@/components/email-template';\nimport { Resend } from 'resend';\n\nconst resend = new Resend('".concat(s,"');\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  const { data, error } = await resend.emails.send({\n    from: '").concat(r,"',\n    to: '").concat(a,"',\n    subject: '").concat(o,"',\n    react: EmailTemplate({ firstName: 'John' }),\n  });\n\n  if (error) {\n    return res.status(400).json(error);\n  }\n\n  return res.status(200).json(data);\n}"),u="import { json } from '@remix-run/node';\nimport { Resend } from 'resend';\n\nconst resend = new Resend('".concat(s,"');\n\nexport const loader = async () => {\n  const { data, error } = await resend.emails.send({\n    from: '").concat(r,"',\n    to: '").concat(a,"',\n    subject: '").concat(o,"',\n    html: '").concat(i,"',\n  });\n\n  if (error) {\n    return json(error, 400);\n  }\n\n  return json(data, 200);\n};"),p="import { Resend } from 'resend';\n\nconst resend = new Resend('".concat(s,"');\n\nexport default defineEventHandler(async () => {\n  const { data, error } = await resend.emails.send({\n    from: '").concat(r,"',\n    to: '").concat(a,"',\n    subject: '").concat(o,"',\n    html: '").concat(i,"',\n  });\n\n  if (error) {\n    return error;\n  }\n\n  return data;\n});"),m="import { Resend } from 'resend';\nimport express, { Request, Response } from 'express';\n\nconst resend = new Resend('".concat(s,"');\nconst app = express();\n\napp.get('/', async (req: Request, res: Response) => {\n  const { data, error } = await resend.emails.send({\n    from: '").concat(r,"',\n    to: '").concat(a,"',\n    subject: '").concat(o,"',\n    html: '").concat(i,"',\n  });\n\n  if (error) {\n    return res.status(400).json(error);\n  }\n\n  return res.status(200).json(data);\n})"),h="import { Resend } from 'resend';\nimport { EmailTemplate } from './email-template';\n\nconst resend = new Resend('".concat(s,"');\n\nconst server = Bun.serve({\n  port: 3000,\n  async fetch() {\n    const { data, error } = await resend.emails.send({\n      from: '").concat(r,"',\n      to: ['").concat(a,"'],\n      subject: '").concat(o,"',\n      html: '").concat(i,"',\n    });\n\n    if (error) {\n      return new Response(JSON.stringify(error));\n    }\n\n    return new Response(JSON.stringify(data));\n  },\n});\n\nconsole.log(`Listening on http://localhost:${server.port} ...`);"),f="import { Resend } from 'resend';\nimport type { APIGatewayEvent, Context } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context) => {\n  const resend = new Resend('".concat(s,"');\n\n  const { data, error } = await resend.emails.send({\n    from: '").concat(r,"',\n    to: ['").concat(a,"'],\n    subject: '").concat(o,"',\n    html: '").concat(i,"',\n  });\n\n  if (error) {\n    return {\n      statusCode: 400,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ error }),\n    };\n  }\n\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ data }),\n  };\n};"),x="$resend = Resend::client('".concat(s,"');\n\n$resend->emails->send([\n  'from' => '").concat(r,"',\n  'to' => '").concat(a,"',\n  'subject' => '").concat(o,"',\n  'html' => '").concat(i,"',\n]);"),g="// Add this to your .env file:\nRESEND_API_KEY=".concat(s,"\n\n// Send the email\nResend::emails()->send([\n  'from' => '").concat(r,"',\n  'to' => '").concat(a,"',\n  'subject' => '").concat(o,"',\n  'html' => '").concat(i,"',\n]);"),b='require "resend"\n\nResend.api_key = "'.concat(s,'"\n\nparams = {\n  "from": "').concat(r,'",\n  "to": "').concat(a,'",\n  "subject": "').concat(o,'",\n  "html": "').concat(i,'"\n}\n\nsent = Resend::Emails.send(params)\nputs sent'),j='# Add this to config/initializers/mailer.rb:\nResend.api_key = "'.concat(s,"\"\n\n# Add this to config/environments/environment.rb:\nconfig.action_mailer.delivery_method = :resend\n\n# Send the email\nclass UserMailer < ApplicationMailer\n  default from: '").concat(r,"'\n  def welcome_email\n    @user = params[:user]\n    @url = 'http://example.com/login'\n    mail(to: [\"").concat(a,"\"], subject: '").concat(o,"')\n  end\nend"),y='require "sinatra"\nrequire "resend"\n\nset :port, 5000\nset :bind, "0.0.0.0"\n\nResend.api_key = \''.concat(s,"'\n\nget \"/\" do\n\n  content_type :json\n\n  params = {\n    from: '").concat(r,"',\n    to: '").concat(a,"',\n    subject: '").concat(o,"',\n    html: '").concat(i,"',\n  }\n\n  Resend::Emails.send(params).to_hash.to_json\nend"),v='package main\n\nimport "github.com/resend/resend-go/v2"\n\nfunc main() {\n  apiKey = "'.concat(s,'"\n\n  client := resend.NewClient(apiKey)\n\n  params := &resend.SendEmailRequest{\n    From:    "').concat(r,'",\n    To:      []string{"').concat(a,'"},\n    Subject: "').concat(o,'",\n    Html:    "').concat(i,'",\n  }\n\n  client.Emails.Send(params)\n}'),R='client = Resend.client(api_key: "'.concat(s,'")\n\nResend.Emails.send(client, %{\n  from: "').concat(r,'",\n  to: "').concat(a,'",\n  subject: "').concat(o,'",\n  html: "').concat(i,'"\n})'),w='# Configure your adapter in prod.exs:\nconfig :my_app, MyApp.Mailer, adapter: Resend.Swoosh.Adapter\n\n# Add your API key from the environment in runtime.exs:\nconfig :my_app, MyApp.Mailer, api_key: "'.concat(s,'"'),N='import resend\n\nresend.api_key = "'.concat(s,'"\n\nparams = {\n  "from": "').concat(r,'",\n  "to": ["').concat(a,'"],\n  "subject": "').concat(o,'",\n  "html": "').concat(i,'",\n}\n\nemail = resend.Emails.send(params)\nprint(email)'),_='import resend\nfrom flask import Flask, jsonify\n\nresend.api_key = "'.concat(s,'"\n\napp = Flask(__name__)\n\n@app.route("/")\ndef index():\n  params = {\n    "from": "').concat(r,'",\n    "to": ["').concat(a,'"],\n    "subject": "').concat(o,'",\n    "html": "').concat(i,'",\n  }\n\n  r = resend.Emails.send(params)\n  return jsonify(r)\n\nif __name__ == "__main__":\n  app.run()\n'),E="curl -X POST 'https://api.resend.com/emails' \\\n  -H 'Authorization: Bearer ".concat(s,"' \\\n  -H 'Content-Type: application/json' \\\n  -d $'{\n    \"from\": \"").concat(r,'",\n    "to": "').concat(a,'",\n    "subject": "').concat(o,'",\n    "html": "').concat(i,"\"\n  }'"),S="wget --method POST \\\n  --header 'Authorization: Bearer ".concat(s,"' \\\n  --header 'Content-Type: application/json' \\\n  --body-data $'{\n    \"from\": \"").concat(r,'",\n    "to": "').concat(a,'",\n    "subject": "').concat(o,'",\n    "html": "').concat(i,"\"\n  }' \\\n  'https://api.resend.com/emails'"),P="/* global fetch */\nconst RESEND_API_KEY = '".concat(s,"';\n\nexport const handler = async(event) => {\n  const res = await fetch('https://api.resend.com/emails', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${RESEND_API_KEY}`\n    },\n    body: JSON.stringify({\n      from: '").concat(r,"',\n      to: '").concat(a,"',\n      subject: '").concat(o,"',\n      html: '").concat(i,"',\n    })\n  });\n\n  if (res.ok) {\n    const data = await res.json();\n\n    return {\n      statusCode: 200,\n      body: data,\n    };\n  }\n};"),A="export default {\n  async fetch(request, env, ctx) {\n    const RESEND_API_KEY = '".concat(s,"';\n\n    const response = await fetch('https://api.resend.com/emails', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${RESEND_API_KEY}`\n      },\n      body: JSON.stringify({\n        from: '").concat(r,"',\n        to: '").concat(a,"',\n        subject: '").concat(o,"',\n        html: '").concat(i,'\'\n      })\n    });\n\n    const results = await gatherResponse(response);\n    return new Response(results, {\n      headers: {\n        \'Content-Type\': \'application/json\'\n      }\n    });\n\n    /**\n     * gatherResponse awaits and returns a response body as a string.\n     * Use await gatherResponse(..) in an async function to get the response body\n     * @param {Response} response\n     */\n    async function gatherResponse(response) {\n      const { headers } = response;\n      const contentType = headers.get("content-type") || "";\n      if (contentType.includes("application/json")) {\n        return JSON.stringify(await response.json());\n      }\n      return response.text();\n    }\n  },\n};'),T='import { serve } from "https://deno.land/std@0.190.0/http/server.ts";\n\nconst RESEND_API_KEY = \''.concat(s,"';\n\nconst handler = async (_request: Request): Promise<Response> => {\n  const res = await fetch('https://api.resend.com/emails', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${RESEND_API_KEY}`\n    },\n    body: JSON.stringify({\n      from: '").concat(r,"',\n      to: '").concat(a,"',\n      subject: '").concat(o,"',\n      html: '").concat(i,"',\n    })\n  });\n\n  const data = await res.json();\n\n  return new Response(JSON.stringify(data), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\nserve(handler);"),k="import { NextResponse } from 'next/server';\n\nexport const runtime = 'edge';\nexport const dynamic = 'force-dynamic';\n\nconst RESEND_API_KEY = '".concat(s,"';\n\nexport async function POST() {\n  const res = await fetch('https://api.resend.com/emails', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${RESEND_API_KEY}`\n    },\n    body: JSON.stringify({\n      from: '").concat(r,"',\n      to: '").concat(a,"',\n      subject: '").concat(o,"',\n      html: '").concat(i,"',\n    })\n  });\n\n  if (res.ok) {\n    const data = await res.json();\n    return NextResponse.json(data);\n  }\n}"),O="# Add these attributes to your settings.py file:\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nRESEND_SMTP_HOST = 'smtp.resend.com'\nRESEND_SMTP_PORT = 587\nRESEND_SMTP_USERNAME = 'resend'\nRESEND_SMTP_PASSWORD = '".concat(s,"'\n\n# Use Django's get_connection and EmailMessage:\nwith get_connection(\n    host=settings.RESEND_SMTP_HOST,\n    port=settings.RESEND_SMTP_PORT,\n    username=settings.RESEND_SMTP_USERNAME,\n    password=RESEND_SMTP_PASSWORD,\n    use_tls=True,\n    ) as connection:\n        r = EmailMessage(\n            from_email=").concat(r,",\n            subject=").concat(o,",\n            to=").concat(a,",\n            body=message,\n            connection=connection).send()\n"),M="// Add this to your .env file:\nMAIL_MAILER=smtp\nMAIL_HOST=smtp.resend.com\nMAIL_PORT=587\nMAIL_ENCRYPTION=tls\nMAIL_USERNAME=resend\nMAIL_PASSWORD=".concat(s),I="import nodemailer from 'nodemailer';\n\nasync function main() {\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.resend.com',\n    secure: true,\n    port: 465,\n    auth: {\n      user: 'resend',\n      pass: '".concat(s,"',\n    },\n  });\n\n  const info = await transporter.sendMail({\n    from: '").concat(r,"',\n    to: '").concat(a,"',\n    subject: '").concat(o,"',\n    html: '").concat(i,"',\n  });\n\n  console.log('Message sent: %s', info.messageId);\n}\n\nmain().catch(console.error);"),C="# Add this to config/environments/environment.rb:\nconfig.action_mailer.delivery_method = :smtp\nconfig.action_mailer.smtp_settings = {\n  :address   => 'smtp.resend.com',\n  :port      => 465,\n  :user_name => 'resend',\n  :password  => '".concat(s,"',\n  :tls => true\n}\n\n# Create class definition on app/mailers/user_mailer.rb:\nclass UserMailer < ApplicationMailer\n  default from: '").concat(r,"'\n  def welcome_email\n    @user = params[:user]\n    @url = 'http://example.com/login'\n    mail(to: [\"").concat(a,"\"], subject: '").concat(o,"')\n  end\nend"),D="import com.resend.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Resend resend = new Resend('".concat(s,');\n\n        SendEmailRequest sendEmailRequest = SendEmailRequest.builder()\n                .from("').concat(r,'")\n                .to("').concat(a,'")\n                .subject("').concat(o,'")\n                .html("').concat(i,'")\n                .build();\n\n        SendEmailResponse data = resend.emails().send(sendEmailRequest);\n    }\n}'),q="https://github.com/resend/resend-nextjs-app-router-example",J="https://github.com/resend/resend-nuxt-example",L="https://github.com/resend/resend-remix-example",Y="https://github.com/resend/resend-node-example",F="https://github.com/resend/resend-express-example",H="https://github.com/resend/resend-redwoodjs-example",K="https://github.com/resend/resend-bun-example",B="https://github.com/resend/resend-vercel-edge-functions-example",U="https://github.com/resend/resend-supabase-edge-functions-example",V="https://github.com/resend/resend-cloudflare-workers-example",$="https://github.com/resend/resend-aws-lambda-example",z="https://github.com/resend/resend-ruby-example",W="https://github.com/resend/resend-rails-example",G="https://github.com/resend/resend-sinatra-example",Q="https://github.com/resend/resend-python-example",Z="https://github.com/resend/resend-flask-example",X="https://github.com/resend/resend-php-example",ee="https://github.com/resend/resend-laravel-example",en="https://github.com/resend/resend-go-example",et="https://github.com/resend/resend-java-example",es="https://github.com/resend/resend-elixir-example",er="https://github.com/resend/resend-phoenix-example",ea="https://github.com/resend/resend-curl-example",eo="https://github.com/resend/resend-wget-example",ei="https://github.com/resend/resend-django-smtp-example",ec="https://github.com/resend/resend-nodemailer-smtp-example"},3574:function(e,n,t){t.d(n,{_:function(){return r}});var s=t(67294);let r=(e,n)=>{let[t,r]=s.useState(()=>{{let t=localStorage.getItem(e);return t?JSON.parse(t):n}});return s.useEffect(()=>{window.localStorage.setItem(e,JSON.stringify(t))},[e,t]),[t,r]}}}]);